kubectl get pods
kubectl get services

Create deployment
kubectl apply -f <file-name>

delete deployment
kubectl delete -f <file-name>

create svc:-
kubectl create svc nodeport nginx --tcp=80:80
kubectl create svc nodeport nginx --tcp=81<pod-port>:80<container-port>

create pod:-
kubectl run  --image=nginx nginx-pod --port=80
kubectl delete pod nginx-pod

minikube start
minikube start --force
kubectl get nodes
kubectl create deployment (deployment-name) --image=(image-name)
kubectl get pods
kubectl get services -----------------shows pod ip
kubectl get replicaset ---------------no. of replicas desired and current
kubectl get deployment ---------------up to date replicaset
kubectl delete deployment (deployment-name)

_______
Loggs
-------
volumes:-
------
kubectl describe pvc --namespace <namespace>

kubectl describe pv --namespace  devops-tools

pods:-
kubectl describe pod <podname> --namespace <namespace>


#Show details of specific pod
kubectl  describe pod <pod name> -n <namespace-name>

# View logs for specific pod
kubectl  logs <pod name> -n <namespace-name>

# View resources request and limit across nodes
kubectl get nodes --no-headers | awk '{print $1}' | xargs -I {} sh -c 'echo {}; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo'

# view resources request limits of posd
kubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"/t"}{.spec.containers[].resources.limits/requests.memory/cpu}{"\n"}{end}' -n devops-tools

# view specific columns from get pod
kubectl get pod -o=custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.spec.nodeName --all-namespaces

# view containers in a pods:-
kubectl get pods <podname> -n <namespace>  -o jsonpath='{.spec.containers[*].name}'

--------------
#top of pods
--------------
kubectl top pods --all-namespaces

-----------
objects and their info NAME,SHORTNAMES,APIVERSION,NAMESPACED,KIND
------------------
kubectl api-resources 

------
exec
------

kubectl exec -it -n <name-space> <pod-name> -c <cont-name> -- /bin/bash


---------------------------------------
create a yaml from any object running
--------------------------------------

kubectl get deployment,service,pod yourapp -o yaml --export
kubectl get deploy --all-namespaces -o yaml --export
kubectl get deploy,sts,svc,configmap,secret -n default -o yaml --export > default.yaml

examples:-
kubectl get deploy --namespace nginx-test -o yaml
kubectl get service --namespace nginx-test -o yaml

we can save this in a yaml and delete or redeploy if required in case og yaml is missing


